jQuery.ajaxSetup({
    'beforeSend': function(xhr) {
        xhr.setRequestHeader("Accept", "text/javascript")
    }
});
jQuery.fn.getWithAjax = function(url, data, success, error) {
    jQuery.fn.sendWithAjax('get', url, data, success, error);
};
jQuery.fn.postWithAjax = function(url, data, success, error) {
    jQuery.fn.sendWithAjax('post', url, data, success, error);
};
jQuery.fn.putWithAjax = function(url, data, success, error) {
    jQuery.fn.sendWithAjax('put', url, data, success, error);
}
jQuery.fn.sendWithAjax = function(method, url, data, success, error) {
    success = typeof(success) != 'undefined' ? success : null;
    error = typeof(error) != 'undefined' ? error : null;
    jQuery.ajax({
        type: method,
        url: url,
        data: data,
        success: success,
        error: error,
        dataType: "script",
        async: false
    });
    return this;
};
if (!Array.prototype.last) {
    Array.prototype.last = function() {
        return this[this.length - 1];
    }
}

function inspect(obj, maxLevels, level) {
    var str = '', type, msg;

    // Start Input Validations
    // Don't touch, we start iterating at level zero
    if (level == null)  level = 0;

    // At least you want to show the first level
    if (maxLevels == null) maxLevels = 1;
    if (maxLevels < 1)
        return '<font color="red">Error: Levels number must be > 0</font>';

    // We start with a non null object
    if (obj == null)
        return '<font color="red">Error: Object <b>NULL</b></font>';
    // End Input Validations

    // Each Iteration must be indented
    str += '<ul>';

    // Start iterations for all objects in obj
    for (property in obj) {
        try {
            // Show "property" and "type property"
            type = typeof(obj[property]);
            str += '<li>(' + type + ') ' + property +
                    ( (obj[property] == null) ? (': <b>null</b>') : ('')) + '</li>';

            // We keep iterating if this property is an Object, non null
            // and we are inside the required number of levels
            if ((type == 'object') && (obj[property] != null) && (level + 1 < maxLevels))
                str += inspect(obj[property], maxLevels, level + 1);
        }
        catch(err) {
            // Is there some properties in obj we can't access? Print it red.
            if (typeof(err) == 'string') msg = err;
            else if (err.message)        msg = err.message;
            else if (err.description)    msg = err.description;
            else                        msg = 'Unknown';

            str += '<li><font color="red">(Error) ' + property + ': ' + msg + '</font></li>';
        }
    }

    // Close indent
    str += '</ul>';

    return str;
}

function toggle_view() {
}

function toggle_widgets() {
    var is_opened = $('.show_widgets').toggleClass('opened').hasClass('opened');
    var height = $('#widgets-container').height();
    var wc_shift = is_opened ? -height : 40;
    var b_shift = is_opened ? height + 35 : 35;
    $('#widgets-container').stop(true, true).animate({
        bottom: wc_shift
    }, 500);
    $('.admin_wrap').stop(true, true).animate({
        paddingTop: b_shift
    }, 500)

}

function flash_error(placeholder) {
    placeholder.sortable('cancel');
    placeholder.effect("highlight", {color: 'red'}, 2000);
}

function setup_admin_bar(page_id, create_url, update_url, sort_url) {
    $('body').addClass('admin_wrap');

    $(".placeholder_page, .placeholder_theme").each(function() {
        var w = $(this).width();
        $(this).width(w - 2);
    });

    var placeholders = $(".placeholder_page, .placeholder_theme");
    $("#widgets-container ul.draggable li").draggable({
        cursor: 'crosshair',
        helper: 'clone',
        revert: 'invalid',
        connectToSortable: placeholders
    });
    var oldPlaceholder, newPlaceholder, itemInMove;
    placeholders.sortable({
        revert: false,
        connectWith: placeholders,
        start: function(event, ui) {
            // Start dragging
            itemInMove = ui.item;
            oldPlaceholder = newPlaceholder = itemInMove.parent();
        },
        change: function(event, ui) {
            // placeholder change
            if (ui.sender) {
                newPlaceholder = ui.placeholder.parent();
                console.warn('placeholder change to ' + newPlaceholder.attr('id'));
            }
        },
        stop: function(event, ui) {
            // Item dropped
            var split = itemInMove.attr('data-id').split('_');
            var params;

            // data-id is
            //   registered_widget_<id> - from list of registered widgets
            //   widget_<id>            - from another placeholder
            if (split.length == 3) {
                // Create
                params = 'placeholder=' + newPlaceholder.attr('id') + '&page_id=' + page_id;
                $(this).postWithAjax(create_url, params + '&reg_id=' + split.last(), function() {
                    $(this).postWithAjax(sort_url, params + '&' + newPlaceholder.sortable('serialize', {attribute: 'data-id'}), function() {
                        newPlaceholder.effect("highlight", {}, 2000);
                    });
                });
            } else {
                // Move
                params = 'placeholder=' + newPlaceholder.attr('id') + '&page_id=' + page_id;
                if (newPlaceholder == oldPlaceholder) {
                    // just order was changed
                    $(this).postWithAjax(sort_url, params + '&' + newPlaceholder.sortable('serialize', {attribute: 'data-id'}),
                            function() {
                                newPlaceholder.effect("highlight", {}, 2000);
                            },
                            function() {
                                flash_error(oldPlaceholder);
                            }
                    );
                } else {
                    // Move between placeholders
                    var url = update_url.replace('ReplaceMe', split.last());
                    // 1. Change placeholder
                    $(this).putWithAjax(url, params,
                            function() {
                                // 2. Sort new one
                                $(this).postWithAjax(sort_url, params + '&' + newPlaceholder.sortable('serialize', {attribute: 'data-id'}),
                                        function() {
                                            // 3. Sort old one
                                            params = 'placeholder=' + oldPlaceholder.attr('id') + '&page_id=' + page_id;
                                            $(this).postWithAjax(sort_url, params + '&' + oldPlaceholder.sortable('serialize', {attribute: 'data-id'}),
                                                    function() {
                                                        newPlaceholder.effect("highlight", {}, 2000);
                                                    },
                                                    function() {
                                                        flash_error(oldPlaceholder);
                                                    }
                                            );
                                        },
                                        function() {
                                            flash_error(oldPlaceholder);
                                        }
                                );
                            },
                            function() {
                                flash_error(oldPlaceholder);
                            }
                    );
                }
            }

        }
    });
    $('.draggable, .draggable li, .placeholder_page, .placeholder_page li, .placeholder_theme, .placeholder_theme li')
            .disableSelection();
}
